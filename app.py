# -*- coding: utf-8 -*-
# Streamlit app: ‡∏û‡∏£‡∏µ‡∏ß‡∏¥‡∏ß PDF ‡πÅ‡∏ö‡∏ö Real-time ‡∏õ‡∏£‡∏±‡∏ö X/Y ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏´‡πá‡∏ô‡∏ú‡∏•‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
# ‡πÇ‡∏à‡∏ó‡∏¢‡πå: 1 ‡∏´‡∏ô‡πâ‡∏≤/‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô 1 ‡∏Ñ‡∏ô (‡∏à‡∏≤‡∏Å CSV 1 ‡∏´‡∏£‡∏∑‡∏≠ 2 ‡πÄ‡∏ó‡∏≠‡∏°), ‡πÄ‡∏ï‡∏¥‡∏° Total(50) ‡∏•‡∏á‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏ß‡πâ‡∏ô‡πÉ‡∏ô‡πÄ‡∏ó‡∏°‡πÄ‡∏û‡∏•‡∏ï Canva

import io
import base64
import streamlit as st
import pandas as pd

# ===== UI HEAD =====
st.set_page_config(page_title="Conversation ‚Üí PDF (Realtime Preview)", layout="wide")
st.title("üìÑ Conversation Result ‚Üí PDF (Realtime X/Y Preview)")
st.caption("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏ó‡∏°‡πÄ‡∏û‡∏•‡∏ï PDF (Canva ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß) + CSV ‡πÄ‡∏ó‡∏≠‡∏° 1/2 ‚Üí ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡πà‡∏≤ Total ‡∏•‡∏á‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏ß‡πâ‡∏ô‡πÑ‡∏ß‡πâ ‚Ä¢ ‡∏û‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏™‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏±‡∏ö X/Y")

# ===== Sidebar: Controls =====
st.sidebar.header("üîß ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (‡∏´‡∏ô‡πà‡∏ß‡∏¢ pt)")
# ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏∞‡∏Ñ‡∏£‡πà‡∏≤‡∏ß ‡πÜ ‚Äî ‡∏à‡∏π‡∏ô‡∏à‡∏≤‡∏Å‡∏û‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡πÅ‡∏ú‡πà‡∏ô‡∏à‡∏£‡∏¥‡∏á
name_x = st.sidebar.number_input("Name X", 0, 2000, 140, step=1)
name_y = st.sidebar.number_input("Name Y", 0, 2000, 160, step=1)
id_x   = st.sidebar.number_input("Student ID X", 0, 2000, 140, step=1)
id_y   = st.sidebar.number_input("Student ID Y", 0, 2000, 190, step=1)
s1_x   = st.sidebar.number_input("Total S1 X", 0, 2000, 430, step=1)
s1_y   = st.sidebar.number_input("Total S1 Y", 0, 2000, 300, step=1)
s2_x   = st.sidebar.number_input("Total S2 X", 0, 2000, 430, step=1)
s2_y   = st.sidebar.number_input("Total S2 Y", 0, 2000, 340, step=1)

st.sidebar.header("üÖ∞Ô∏è ‡∏ü‡∏≠‡∏ô‡∏ï‡πå")
font_size = st.sidebar.number_input("‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£", 6, 72, 16, step=1)
bold = st.sidebar.checkbox("‡∏ï‡∏±‡∏ß‡∏´‡∏ô‡∏≤ (Helvetica-Bold)", value=True)

st.sidebar.header("üß≠ ‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏Å‡∏ô Y")
top_left_mode = st.sidebar.checkbox("‡πÉ‡∏ä‡πâ Y ‡πÅ‡∏ö‡∏ö‡∏à‡∏≤‡∏Å‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡∏•‡∏á‡∏•‡πà‡∏≤‡∏á (Top-Left Origin)", value=False)
st.sidebar.caption("‡∏õ‡∏Å‡∏ï‡∏¥ PDF ‡∏°‡∏µ‡∏à‡∏∏‡∏î‡∏Å‡∏≥‡πÄ‡∏ô‡∏¥‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏∏‡∏°‡∏•‡πà‡∏≤‡∏á‡∏ã‡πâ‡∏≤‡∏¢ (y ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô = ‡∏Ç‡∏∂‡πâ‡∏ô‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô). ‡∏ñ‡πâ‡∏≤‡∏ï‡∏¥‡πä‡∏Å‡∏ï‡∏±‡∏ß‡∏ô‡∏µ‡πâ y ‡∏à‡∏∞‡∏ß‡∏±‡∏î‡∏à‡∏≤‡∏Å‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡∏•‡∏á‡∏•‡πà‡∏≤‡∏á‡πÅ‡∏ó‡∏ô")

st.sidebar.header("üîó ‡∏Å‡∏≤‡∏£‡πÅ‡∏°‡πá‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
join_key = st.sidebar.selectbox("‡∏Ñ‡∏µ‡∏¢‡πå‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà 2 ‡πÄ‡∏ó‡∏≠‡∏°", ["Student ID", "Name - Surname"], index=0)
when_single = st.sidebar.selectbox("‡∏ñ‡πâ‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î CSV ‡πÄ‡∏ó‡∏≠‡∏°‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡πÉ‡∏´‡πâ‡πÉ‡∏™‡πà‡∏•‡∏á‡∏ä‡πà‡∏≠‡∏á", ["S1", "S2"], index=0)

st.sidebar.header("üî§ ‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÑ‡∏ó‡∏¢ (‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å)")
font_file = st.sidebar.file_uploader("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î .ttf/.otf (‡∏ñ‡πâ‡∏≤‡∏à‡∏∞‡∏û‡∏¥‡∏°‡∏û‡πå‡πÑ‡∏ó‡∏¢‡πÉ‡∏´‡πâ‡∏™‡∏ß‡∏¢)", type=["ttf","otf"])

# ===== Uploaders =====
with st.expander("‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ (‡∏¢‡πà‡∏≠)"):
    st.markdown("""
1) ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î **Template PDF** ‡∏à‡∏≤‡∏Å Canva (‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß)  
2) ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î **CSV ‡πÄ‡∏ó‡∏≠‡∏° 1** ‡πÅ‡∏•‡∏∞/‡∏´‡∏£‡∏∑‡∏≠ **CSV ‡πÄ‡∏ó‡∏≠‡∏° 2**  
   - ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå: `No, Student ID, Name - Surname, Idea, Pronunciation, Preparedness, Confidence, Total (50)`  
   - ‡∏£‡∏±‡∏ö‡πÅ‡∏ñ‡∏ß `Score` ‡πÅ‡∏•‡∏∞‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ß‡πà‡∏≤‡∏á (‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏±‡∏î‡∏ó‡∏¥‡πâ‡∏á‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥)  
3) ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏µ‡∏¢‡πå‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà (ID ‡∏´‡∏£‡∏∑‡∏≠ Name) ‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÉ‡∏™‡πà‡πÅ‡∏ñ‡∏ß‡πÄ‡∏ó‡∏≠‡∏°‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏•‡∏á S1/S2  
4) ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ‚Üí ‡∏õ‡∏£‡∏±‡∏ö X/Y ‚Üí ‡∏û‡∏£‡∏µ‡∏ß‡∏¥‡∏ß PDF ‡πÅ‡∏ö‡∏ö Real-time  
5) ‡∏Å‡∏î Export ‡∏ó‡∏±‡πâ‡∏á‡∏ä‡∏∏‡∏î ‚Üí ‡πÑ‡∏î‡πâ‡πÑ‡∏ü‡∏•‡πå PDF ‡∏£‡∏ß‡∏° (1 ‡∏´‡∏ô‡πâ‡∏≤/‡∏Ñ‡∏ô)
""")

tpl_file = st.file_uploader("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î Template PDF (Canva / ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß)", type=["pdf"])
csv_s1 = st.file_uploader("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î CSV ‡πÄ‡∏ó‡∏≠‡∏° 1", type=["csv"])
csv_s2 = st.file_uploader("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î CSV ‡πÄ‡∏ó‡∏≠‡∏° 2 (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)", type=["csv"])

REQUIRED_COLS = ["No","Student ID","Name - Surname","Idea","Pronunciation","Preparedness","Confidence","Total (50)"]

# ===== CSV Parser (Robust) =====
def _decode_csv_bytes(b: bytes) -> str:
    for enc in ("utf-8-sig","utf-8","cp874","latin-1"):
        try:
            return b.decode(enc)
        except Exception:
            continue
    return b.decode("utf-8", errors="ignore")

def parse_csv_bytes(b: bytes) -> pd.DataFrame | None:
    if b is None:
        return None
    txt = _decode_csv_bytes(b)
    df_raw = pd.read_csv(io.StringIO(txt), header=None, dtype=str)
    header_idx = None
    for i in range(min(20, len(df_raw))):
        row = df_raw.iloc[i].fillna("").astype(str).tolist()
        if "No" in row and "Student ID" in row:
            header_idx = i
            break
    if header_idx is None:
        df = pd.read_csv(io.StringIO(txt), dtype=str).fillna("")
    else:
        headers = df_raw.iloc[header_idx].fillna("").astype(str).tolist()
        df = df_raw.iloc[header_idx+1:].copy()
        df.columns = headers
        df = df.fillna("")
    cols = [c for c in df.columns if c in REQUIRED_COLS]
    df = df[cols]
    if "No" in df.columns:
        mask_score = df["No"].astype(str).str.strip().str.lower().eq("score")
        df = df[~mask_score]
        df = df[df["No"].astype(str).str.strip() != ""]
    df.columns = [c.strip() for c in df.columns]
    return df.reset_index(drop=True)

# ===== Merge 2 semesters =====
def coalesce(a,b):
    a = "" if pd.isna(a) else str(a)
    b = "" if pd.isna(b) else str(b)
    return a if a.strip() else b

def merge_semesters(df1: pd.DataFrame | None, df2: pd.DataFrame | None,
                    key: str, when_single: str) -> pd.DataFrame | None:
    if df1 is not None and df2 is not None:
        merged = pd.merge(df1, df2, on=key, how="outer", suffixes=("_S1","_S2"))
        merged["Name"] = [coalesce(a,b) for a,b in zip(merged.get("Name - Surname_S1",""),
                                                       merged.get("Name - Surname_S2",""))]
        merged["StudentID"] = [coalesce(a,b) for a,b in zip(merged.get("Student ID_S1",""),
                                                            merged.get("Student ID_S2",""))]
        merged["Total_S1"] = merged.get("Total (50)_S1","")
        merged["Total_S2"] = merged.get("Total (50)_S2","")
        out = merged[["Name","StudentID","Total_S1","Total_S2"]].copy()
        if key == "Student ID":
            out = out.sort_values(by=["StudentID","Name"], kind="stable")
        else:
            out = out.sort_values(by=["Name","StudentID"], kind="stable")
        return out.reset_index(drop=True)

    df = df1 if df1 is not None else df2
    if df is None:
        return None
    out = pd.DataFrame()
    out["Name"] = df.get("Name - Surname","")
    out["StudentID"] = df.get("Student ID","")
    if when_single == "S1":
        out["Total_S1"] = df.get("Total (50)",""); out["Total_S2"] = ""
    else:
        out["Total_S1"] = ""; out["Total_S2"] = df.get("Total (50)","")
    if key == "Student ID":
        out = out.sort_values(by=["StudentID","Name"], kind="stable")
    else:
        out = out.sort_values(by=["Name","StudentID"], kind="stable")
    return out.reset_index(drop=True)

# ===== PDF overlay backend (ReportLab + PyPDF) =====
def build_one_page_overlay_pdf(page_w: float, page_h: float,
                               name: str, sid: str, total_s1: str, total_s2: str,
                               font_size: float, bold: bool,
                               name_xy, id_xy, s1_xy, s2_xy,
                               top_left_mode: bool,
                               font_file_bytes: bytes | None) -> bytes:
    """
    ‡∏™‡∏£‡πâ‡∏≤‡∏á PDF 1 ‡∏´‡∏ô‡πâ‡∏≤ ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÅ‡∏Ñ‡πà‡∏ï‡∏±‡∏ß‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠ (overlay) ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ó‡∏°‡πÄ‡∏û‡∏•‡∏ï
    """
    from reportlab.pdfgen import canvas
    from reportlab.lib.colors import black
    from reportlab.pdfbase import pdfmetrics
    from reportlab.pdfbase.ttfonts import TTFont

    buf = io.BytesIO()
    c = canvas.Canvas(buf, pagesize=(page_w, page_h))
    c.setFillColor(black)

    # ‡∏ü‡∏≠‡∏ô‡∏ï‡πå
    fontname = "Helvetica-Bold" if bold else "Helvetica"
    if font_file_bytes:
        try:
            # ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠ 'CustomFont' / 'CustomFont-Bold'
            # (ReportLab ‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å Bold ‡∏≠‡∏≠‡πÇ‡∏ï‡πâ‡∏Ç‡∏≠‡∏á‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÑ‡∏ó‡∏¢‡πÄ‡∏™‡∏°‡∏≠‡πÑ‡∏õ ‚Äî ‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡πá‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏û‡∏≠)
            tmp = io.BytesIO(font_file_bytes)
            pdfmetrics.registerFont(TTFont("CustomFont", tmp))
            fontname = "CustomFont"
        except Exception:
            pass

    c.setFont(fontname, float(font_size))

    def put(x, y, text):
        s = "" if text is None else str(text).strip()
        if not s:
            return
        yy = page_h - y if top_left_mode else y   # ‡∏ñ‡πâ‡∏≤ top-left mode, ‡πÅ‡∏õ‡∏•‡∏á y: ‡∏ö‡∏ô‡∏•‡∏á‡∏•‡πà‡∏≤‡∏á ‚Üí bottom-left
        c.drawString(float(x), float(yy), s)

    x, y = name_xy;   put(x, y, name)
    x, y = id_xy;     put(x, y, sid)
    x, y = s1_xy;     put(x, y, total_s1)
    x, y = s2_xy;     put(x, y, total_s2)

    c.showPage()
    c.save()
    return buf.getvalue()

def merge_overlay_on_template(template_pdf_bytes: bytes, overlay_pdf_bytes_list: list[bytes]) -> bytes:
    """
    ‡∏ô‡∏≥ overlay ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡∏ô‡πâ‡∏≤‡∏°‡∏≤‡∏ß‡∏≤‡∏á‡∏ó‡∏±‡∏ö‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á template ‡∏ã‡πâ‡∏≥ ‡πÜ (1 ‡∏´‡∏ô‡πâ‡∏≤/‡∏Ñ‡∏ô)
    """
    from pypdf import PdfReader, PdfWriter

    writer = PdfWriter()
    for overlay_bytes in overlay_pdf_bytes_list:
        # ‡∏≠‡πà‡∏≤‡∏ô template ‡πÅ‡∏•‡∏∞ overlay ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç obj ‡∏£‡πà‡∏ß‡∏°
        tpl_reader = PdfReader(io.BytesIO(template_pdf_bytes))
        base_page = tpl_reader.pages[0]

        ov_reader = PdfReader(io.BytesIO(overlay_bytes))
        ov_page = ov_reader.pages[0]
        base_page.merge_page(ov_page)  # ‡∏ß‡∏≤‡∏á‡∏ó‡∏±‡∏ö

        writer.add_page(base_page)

    out = io.BytesIO()
    writer.write(out)
    out.seek(0)
    return out.getvalue()

def make_preview_pdf(template_pdf_bytes: bytes, rec: dict,
                     font_size: float, bold: bool,
                     name_xy, id_xy, s1_xy, s2_xy,
                     top_left_mode: bool,
                     font_file_bytes: bytes | None) -> bytes:
    # ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡∏ô‡∏≤‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ó‡∏°‡πÄ‡∏û‡∏•‡∏ï
    from pypdf import PdfReader
    reader = PdfReader(io.BytesIO(template_pdf_bytes))
    pg = reader.pages[0]
    page_w = float(pg.mediabox.width)
    page_h = float(pg.mediabox.height)

    overlay = build_one_page_overlay_pdf(
        page_w, page_h,
        rec.get("Name",""), rec.get("StudentID",""),
        rec.get("Total_S1",""), rec.get("Total_S2",""),
        font_size, bold,
        name_xy, id_xy, s1_xy, s2_xy,
        top_left_mode,
        font_file.read() if font_file else None
    )
    return merge_overlay_on_template(template_pdf_bytes, [overlay])

def make_full_pdf(template_pdf_bytes: bytes, records: pd.DataFrame,
                  font_size: float, bold: bool,
                  name_xy, id_xy, s1_xy, s2_xy,
                  top_left_mode: bool,
                  font_file_bytes: bytes | None) -> bytes:
    # ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡∏ô‡∏≤‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ó‡∏°‡πÄ‡∏û‡∏•‡∏ï
    from pypdf import PdfReader
    reader = PdfReader(io.BytesIO(template_pdf_bytes))
    pg = reader.pages[0]
    page_w = float(pg.mediabox.width)
    page_h = float(pg.mediabox.height)

    overlays = []
    for _, r in records.iterrows():
        overlays.append(build_one_page_overlay_pdf(
            page_w, page_h,
            r.get("Name",""), r.get("StudentID",""),
            r.get("Total_S1",""), r.get("Total_S2",""),
            font_size, bold,
            name_xy, id_xy, s1_xy, s2_xy,
            top_left_mode,
            font_file_bytes
        ))
    return merge_overlay_on_template(template_pdf_bytes, overlays)

def embed_pdf(pdf_bytes: bytes, height: int = 820):
    b64 = base64.b64encode(pdf_bytes).decode("utf-8")
    html = f'''
    <iframe
        src="data:application/pdf;base64,{b64}"
        width="100%" height="{height}" style="border:1px solid #444; border-radius:8px;">
    </iframe>
    '''
    st.components.v1.html(html, height=height+20)

# ===== Main Logic =====
if tpl_file is None:
    st.info("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î **Template PDF (‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß)** ‡∏Å‡πà‡∏≠‡∏ô")
    st.stop()

# ‡∏≠‡πà‡∏≤‡∏ô CSVs
df1 = parse_csv_bytes(csv_s1.getvalue()) if csv_s1 is not None else None
df2 = parse_csv_bytes(csv_s2.getvalue()) if csv_s2 is not None else None

if (df1 is None) and (df2 is None):
    st.warning("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏ö CSV ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡πÄ‡∏ó‡∏≠‡∏°")
    st.stop()

# ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
c1, c2 = st.columns(2)
if df1 is not None:
    with c1:
        st.subheader("CSV ‡πÄ‡∏ó‡∏≠‡∏° 1 (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á 10 ‡πÅ‡∏ñ‡∏ß)")
        st.dataframe(df1.head(10), use_container_width=True)
if df2 is not None:
    with c2:
        st.subheader("CSV ‡πÄ‡∏ó‡∏≠‡∏° 2 (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á 10 ‡πÅ‡∏ñ‡∏ß)")
        st.dataframe(df2.head(10), use_container_width=True)

# ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
key = "Student ID" if join_key == "Student ID" else "Name - Surname"
merged = merge_semesters(df1, df2, key, when_single)
if merged is None or merged.empty:
    st.error("‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡πÄ‡∏ä‡πá‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå/‡∏Ñ‡∏µ‡∏¢‡πå‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÉ‡∏ô CSV)")
    st.stop()

st.success(f"‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏õ‡∏•‡∏á {len(merged)} ‡∏Ñ‡∏ô (1 ‡∏´‡∏ô‡πâ‡∏≤/‡∏Ñ‡∏ô)")

# ===== Selector for Realtime Preview =====
left, right = st.columns([1,2])

with left:
    st.subheader("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏û‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏™‡∏î")
    # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ä‡∏∑‡πà‡∏≠/ID ‡πÉ‡∏´‡πâ‡πÇ‡∏ä‡∏ß‡πå‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    display_options = []
    for _, r in merged.iterrows():
        label = f'{r.get("StudentID","")}'.strip()
        name = f'{r.get("Name","")}'.strip()
        if label and name:
            display_options.append(f'{label} ‚Äî {name}')
        elif name:
            display_options.append(name)
        else:
            display_options.append(label or "‚Äî")

    idx = st.number_input("‡∏•‡∏≥‡∏î‡∏±‡∏ö (index)", min_value=0, max_value=len(merged)-1, value=0, step=1)
    st.caption("‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏î‡πâ‡∏ß‡∏¢‡∏™‡πÑ‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á")
    idx = st.slider("‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏û‡∏£‡∏µ‡∏ß‡∏¥‡∏ß", 0, len(merged)-1, idx, 1)
    st.text(f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏£‡∏µ‡∏ß‡∏¥‡∏ß: {display_options[idx]}")

with right:
    st.subheader("‡∏û‡∏£‡∏µ‡∏ß‡∏¥‡∏ß PDF (‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏±‡∏ö X/Y)")
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏û‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏ó‡∏µ‡∏•‡∏∞‡∏´‡∏ô‡πâ‡∏≤ (‡∏Ñ‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß) ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    tpl_bytes = tpl_file.getvalue()
    rec = merged.iloc[int(idx)].to_dict()
    try:
        preview_bytes = make_preview_pdf(
            tpl_bytes, rec,
            font_size, bold,
            (name_x, name_y), (id_x, id_y), (s1_x, s1_y), (s2_x, s2_y),
            top_left_mode,
            font_file.read() if font_file else None
        )
        embed_pdf(preview_bytes, height=820)
        st.download_button("‚¨áÔ∏è ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏û‡∏£‡∏µ‡∏ß‡∏¥‡∏ß (PDF 1 ‡∏´‡∏ô‡πâ‡∏≤)", preview_bytes, file_name="preview_1page.pdf")
    except Exception as e:
        st.error(f"‡πÄ‡∏£‡∏ô‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏û‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}")

st.markdown("---")
st.subheader("üì¶ ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å PDF ‡∏ó‡∏±‡πâ‡∏á‡∏ä‡∏∏‡∏î (1 ‡∏´‡∏ô‡πâ‡∏≤/‡∏Ñ‡∏ô)")
export_btn = st.button("Export ‡∏ó‡∏±‡πâ‡∏á‡∏ä‡∏∏‡∏î", type="primary")
if export_btn:
    with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏ô‡πÄ‡∏î‡∏≠‡∏£‡πå PDF ‡∏ó‡∏±‡πâ‡∏á‡∏ä‡∏∏‡∏î‚Ä¶"):
        try:
            full_bytes = make_full_pdf(
                tpl_bytes, merged,
                font_size, bold,
                (name_x, name_y), (id_x, id_y), (s1_x, s1_y), (s2_x, s2_y),
                top_left_mode,
                font_file.read() if font_file else None
            )
            st.success("‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á")
            st.download_button("‚¨áÔ∏è ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏ß‡∏° (PDF)", full_bytes, file_name="Conversation_PerStudent_Output.pdf")
        except Exception as e:
            st.error(f"‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}")
